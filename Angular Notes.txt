Angularjs NOTES

*******************************************************************************************************************
 						Isso são apenas anotações dos tutorais que tenho visto

Um dos principais é o do Rodrigo Branas - https://www.youtube.com/playlist?list=PLQCmSnNFVYnTD5p2fR4EXmtlR6jQJMbPb

********************************************************************************************************************

-  Consideraçõs e Detalhes sobre o Angular -

		---Arquitetura vs Design---

- Arquitetura (tecnologia) ex.: Qual Linguagem? Vai usar injeção de dependências? Vai usar Contexto de persistência extendido? Vai usar requisições assíncronas ou vai enviar isso para uma fila?

- Design (Beleza) Ex.: Interações entre objetos, camadas e suas formas de relacionamento coeso.

O Angular usa M(odel) V(iew) C(ontroller) / P(resent) / V(iew)M(odel) / W(hatever)*.

* KKKK tretas na definição, pois é uma "questão filosófica".

!!! A importância é a separação de responsabilidades. !!!

-- Eis aqui a composição ---

VIEW (DOM) - HTML ou blocos de HTML (componentes de uma SPA - SINGLE PAGE APLICATTION) obs.: js de leve -inbutido ou não-, talvez animações.

CONTROLLER (SUPORTE DO VIEW) - View e Controller não se conhecem, algum arquivo js que faz a lógica das coisas. ex.: cozinha de um restaurante que só reconhece o pedido e não conhece o cliente mas entrega o prato pronto.

SCOPE (GARÇOM) - Faz ligação, a ponte, a mediação entre o view e controller e rola um caminho duplo de dados do V pro C e vice-versa. ex.: o pedido e o prato.


-----------------------------------------------------------------------------------------------------------------------

- Diretivas - são as extensões do HTML que permitem a implementação de novos comportamentos, ou seja, são usadas dentro das tags dos componentes aos quais você quer usar. 
ps.: O angular percorre seu documento a procura dessas diretivas para compilar-las e executar o comportamento delas.

	# ng-app - Fronteiras do seu aplicativo, tudo (outras tags) que estiver dentro dessa tag será compilado pelo AngularJS.

	# ng-controller - Vincula elemento(s) (e seus filhos) da VIEW a um CONTROLLER, cada elemento associado ao seu controller, de onde nasce o $scope mas não é a única forma de haver esse vinculamento, o sistema de roteamento também faz isso (ver mais detalhes). 

	# ng-bind - substitui o elemento por uma expressão (geralmente do $scope que vem do controller declarado e associado ao componente), junto do ng-model realiza o TWO WAY DATABINDING*. Obs.: A interpolação de expressão ( {{ expressão }} ) para ter o mesmo comportamento: pegar uma "coisa" do $scope e exibir.

	# ng-model - vincula uma propriedade ao $scope, entende-se como o inverso do ng-bind, pega uma "coisa" do VIEW e define no $scope, junto com ng-bind realiza o TWO WAY DATABINDING*. Obs.: geralmente aplicado aos INPUT's, SELECT's e nos TEXTAREA's.

		* - CICLO DE NOTIFICAÇÃO EMBARCADO NO ANGULAR, EM VIRTUDE DO COMPILAMENTO QUE O FRAMEWORK FAZ NO HTML ISSO ACABA DEFININDO QUAIS DIRETIVAS SERÃO "ESCUTADAS" A TODO TEMPO PARA EXIBIR A INFORMAÇÃO SEMPRE ATUALIZADA.

	# ng-repeat - permite a iteração sobre os itens de uma coleção ou de um objeto, geralmente declarados no controller vindo do $scope, pode ser utilizado de formas bem dinâmicas.

	# ng-click - atribui um comportamendo (função) ao evento click e irmãos do mesmo ex.: double click. Obs.: a função precisa ser declarada pelo $scope do controle utilizado.
	

